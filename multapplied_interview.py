# -*- coding: utf-8 -*-
"""Multapplied_interview.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zMtIL0K14sjASnxMnZgMNUzjOum-UnNd
"""

import socket
import struct
import textwrap 
import time

#############################################
# OUTPUT FORMAT
#    IPv4
#        Version, Header Length, TTL
#		     Protocol, Source, Destination
#        TCP 
#           TCP source and destincation port
#        UDP 
#           UDP source and destination port
#
# Every ten seconds, it will print a table of each unique packet flow and its frequency
#  (IPsrc,    IPvdest,    TCPsrc,    TCPdest)     count 
##############################################

#unpack the IPV4 data: internet protocol 
def ipv4_packet(data):
    # Extract the information that proceeds every IP payload 
    # including the version, header length ,TTL, protocol, source IP address and destinatio IP address
    version_header_length = data[0]
    #separate version and IHL information 
    version = version_header_length >> 4 
    header_length = (version_header_length & 15) * 4
    ttl, proto, src, dest = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
    #data[header_length:] is payload
    return version, header_length, ttl, proto, ipv4(src), ipv4(dest), data[header_length:]

#returns properly formated IPv4 address (i.e. 127.0.0.1)
def ipv4(addr):
    return '.'.join(map(str, addr))

##############################################

#unpack ICMP packet
def icmp_packet(data):
    icmp_type, code, checksum = struct.unpack('! B B H', data[:4])
    return icmp_type, code, checksum, data[4:]

# unpack TCP segment
def tcp_segment(data):
    (src_port, dest_port, sequence, acknowledgment, offset_reserved_flags) = struct.unpack('! H H L L H', data[:14])
    offset = (offset_reserved_flags >> 12) * 4
    #data[offset:] is the actual data
    return src_port, dest_port, sequence, acknowledgment, data[offset:]
    

#unpack UDP segment
def udp_segment(data):
    src_port, dest_port, size = struct.unpack('! H H 2x H', data[:8])
    return src_port, dest_port, size, data[8:]

##############################################

# Format multi-line data
# For printing data in separate lines
def format_multi_line(prefix, string, size=80):
    size -= len(prefix)
    if isinstance(string, bytes):
        string = ''.join(r'\x{:02x}'.format(byte) for byte in string)
        if size % 2:
            size -= 1
    return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])


# function to get unique values 
def unique(list1):  
    # intilize a null list 
    unique_list = []     
    # traverse for all elements 
    for x in list1: 
        # check if exists in unique_list or not 
        if x not in unique_list: 
            unique_list.append(x)
    return unique_list

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)

    starttime = time.time() # to count to 10s 
    my_list = []
    freq = []

    while True:
        packet_info = []
        raw_data, add = s.recvfrom(65536) 
        (version, header_length, ttl, proto, src, dest, data) = ipv4_packet(raw_data)
        print('\t - ' + 'IPv4 packet:')
        print('\t\t - ' + 'Version: {}, Header Length: {}, TTL: {}'.format(version, header_length, ttl))
        print('\t\t - ' + 'IP Protocol: {}, IP Source: {}, IP Destination: {}'.format(proto, src, dest))
        packet_info.append(src)
        packet_info.append(dest)

        #TCP
        if proto == 6:
            (src_port, dest_port, sequence, acknowledgment, data) = tcp_segment(data)
            print('\t\t - ' + 'TCP Segment:')
            print('\t\t\t - ' + 'Source Port: {}, Destination Port: {}'.format(src_port, dest_port))
            ## uncomment if you want to print the sequence number, achnowledgment number and data
            # print('\t\t\t - ' + 'Sequence: {}, Acknowledgment: {}'.format(sequence, acknowledgment))
            # print('\t\t\t - ' + 'Data: ')
            # print(format_multi_line('\t\t\t - ', data))
            packet_info.append(src_port)
            packet_info.append(dest_port)
               
        #UDP
        elif proto == 17:
            src_port, dest_port, size, data = udp_segment(data)
            print('\t - ' + 'UDP Segment: ')
            print('\t\t - ' + 'Source port: {}, Destination Port: {}, Length: {}'.format(src_port, dest_port, size))
            packet_info.append(src_port)
            packet_info.append(dest_port)
           
        #other
        else:
          pass
          ## uncomment if you want to see the data
          # print(TAB_1 + 'Data:')
          # print(format_multi_line('\t\t - ', data))
            
        my_list.append(tuple(packet_info))
        

        if ((time.time() - starttime) > 10):
          unique_list = unique(my_list)
          for item in unique_list:
            freq.append(my_list.count(item))

          print('\n(IPsrc,        IPvdest,     TCPsrc, TCPdest)     count' )
          for item in unique_list:
            print(item, '\t', freq[unique_list.index(item)] )
          
          starttime = time.time() #reset the starttime for the next 10 seconds loop

main()

